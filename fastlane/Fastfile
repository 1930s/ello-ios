# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.48.0"

default_platform :ios

# handy commands to run if you're having issues with certs & profiles
# cert -o "./certs"

# To grab the dev provisioning profile use:
# sigh -a "co.ello.ElloDev" --adhoc -o "./fastlane/profiles"

# To grab the prod provisioning profile use:
# sigh -a "co.ello.Ello" -o "./fastlane/profiles"

platform :ios do
  before_all do
    ENV["FL_VERSION_NUMBER_VERSION_NUMBER"] = ENV["ELLO_BUILD_NUMBER"]
    ENV["FL_BUILD_NUMBER_BUILD_NUMBER"] = `/bin/bash -c "git rev-list master | wc -l | tr -d ' '"`.strip
    increment_version_number
    increment_build_number
  end

  ######################### PUBLIC LANES ##########################

  lane :appstore do
    sh "bundle install"

    # setup the production configuration
    sh "bundle exec rake generate:prod_keys"
    
    cert( 
      output_path: ENV["CERTS_OUTPUT_PATH"]
    )
    
    udid = sigh(
      app_identifier: ENV["PROD_APP_ID"], 
      output_path: ENV["PROFILE_PATH"],
      development: false
    )
    # use the UDID of the newly created provisioning profile
    ENV["PROFILE_UDID"] = udid

    gym(
      configuration: "Release",
      output_directory: ENV["BUILD_OUTPUT_DIRECTORY"],
      output_name: ENV["BUILD_OUTPUT_NAME"],
      sdk: "iphoneos",
      clean: true
    )
    
    deliver(
      submit_for_review: false,
      skip_screenshots: true,
      skip_metadata: true,
      automatic_release: false,
      app_identifier: ENV["PROD_APP_ID"], 
      ipa: ENV["IPA_PATH"],
      force: true
    )

    sh "bundle exec rake upload:appstore_dsym"

    post_to_slack(scheme: ":ello:", destination: ":apple:")
  end

  lane :donut_devs do
    donut(
      groups: 'ios-devs',
      release_notes_task: "bundle exec rake generate:release_notes_devs"
    )
  end
  
  lane :donut_testers do
    donut(
      groups: 'ios-devs,testers',
      release_notes_task: "bundle exec rake generate:release_notes"
    )
  end

  ######################### PRIVATE LANES #########################
  
  desc "Submit a Donut Build to Crashlytics"
  desc "This will also make sure the profile is up to date"
  private_lane :donut do |options|
    groups = options[:groups]
    release_notes_task = options[:release_notes_task]

    sh "bundle install"

    # setup the production configuration
    sh "bundle exec rake generate:staging_keys"
    
    cert( 
      output_path: ENV["CERTS_OUTPUT_PATH"]
    )
    
    udid = sigh(
      app_identifier: ENV["DONUT_APP_ID"], 
      adhoc: true, 
      output_path: ENV["PROFILE_PATH"],
      development: true
    )
    
    # use the UDID of the newly created provisioning profile
    ENV["PROFILE_UDID"] = udid

    gym(
      configuration: "CrashlyticsStaging",
      output_directory: ENV["BUILD_OUTPUT_DIRECTORY"],
      output_name: ENV["BUILD_OUTPUT_NAME"],
      sdk: "iphoneos"
    )

    crashlytics(
      crashlytics_path: './Pods/Crashlytics/Crashlytics.framework',
      api_token: ENV["CRASHLYTICS_API_TOKEN"],
      build_secret: ENV["CRASHLYTICS_BUILD_SECRET"],
      ipa_path: ENV["IPA_PATH"],
      groups: groups,
      notifications: "YES",
      notes_path: "./bin/crashlytics-staging-release-notes.md"
    )

    sh "bundle exec rake upload:donut_dsym"

    post_to_slack(scheme: ":doughnut:", destination: "Crashlytics")

  end

  private_lane :post_to_slack do |options|
    scheme      = options[:scheme]
    version     = get_version_number(xcodeproj: ENV["XCODE_PROJECT"])
    build       = get_build_number(xcodeproj: ENV["XCODE_PROJECT"])
    destination = options[:destination]

    slack(
      message: "<!here|here>: New :iphone: #{scheme} *#{version}* (#{build}) has been submitted to *#{destination}*  :rocket:",
    )

  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end



# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
